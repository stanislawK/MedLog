version: "3.9"

services:
  postgres:
    restart: unless-stopped
    image: postgres:15.2
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASS
      POSTGRES_HOST: $DB_HOST
      POSTGRES_PORT: $DB_PORT
      PGUSER: $DB_USER
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  medlog:
    restart: unless-stopped
    container_name: medlog_backend
    build:
      context: .
    volumes:
      - ./medlog:/medlog
    env_file:
      - .env
    networks:
      - traefik_proxy
      - default
    labels:
      - traefik.enable=true
      - traefik.http.services.medlog.loadbalancer.server.port=8000
      - traefik.http.routers.medlog.rule=Host(`${TRAEFIK_HOST}`)||Host(`${TRAEFIK_HOST_PROD}`)
      - traefik.http.routers.medlog.tls=true
       traefik.http.routers.medlog.tls.certresolver=cloudflare
      - traefik.http.routers.medlog.entrypoints=web
      - traefik.http.routers.medlog.entrypoints=websecure
      - traefik.http.routers.medlog.priority=1
    depends_on:
      postgres:
        condition: service_healthy
  medlog_nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    container_name: medlog_nginx
    networks:
      - traefik_proxy
      - default
    volumes:
      - ./medlog/staticfiles:/usr/share/nginx/html/static:ro
    depends_on:
      - medlog
    labels:
      - traefik.enable=${NGINX_TRAEFIK_ENABLE}
      - traefik.http.routers.mlstaticfiles.rule=Host(`${TRAEFIK_HOST}`) && PathPrefix(`/static/`)
      - traefik.http.routers.mlstaticfiles.entrypoints=web
      - traefik.http.routers.mlstaticfiles.priority=2
volumes:
  postgres-data:
  staticfiles:

networks:
  traefik_proxy:
    external: true
